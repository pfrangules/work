#!/usr/bin/env python
# encoding: utf-8
# Author: Shawn Roche
# Date: 2/18/2015
#########################
import getpass
import csv
import os
from datetime import date
import argparse
import logging

import progress
from apperianapi import apperian


def main():
    success, failed, user_ids = [], [], []
    today = date.today()

    base_path = os.path.expanduser('~/.ease_utils/del_users')
    if not os.path.exists(base_path):
        os.makedirs(base_path)

    parser = argparse.ArgumentParser(prog='Bulk User Delete',
                                     usage='python delete_users.py --org ORG_NAME --env ENVIRONMENT',
                                     add_help='The user_ids.csv should be placed in a folder with the same name '
                                              'as the org.  --env and --csv are optional')
    parser.add_argument('--org', metavar='Organization')
    parser.add_argument('--env', default='default', help='Environment to run against')
    parser.add_argument('--csv', default='user_ids.csv', help='Path to the csv with user IDs. Default is user_ids.csv')
    parser.add_argument('--verbose', default=False, action='store_true', help='display additional logging info')
    args = parser.parse_args()

    log_level = logging.DEBUG if args.verbose else logging.CRITICAL
    logging.basicConfig(filename='{}/{}.log'.format(base_path, today),
                        filemode='a',
                        format="[%(levelname)8s] %(message)s",
                        level=log_level
                        )

    with open(args.csv, 'rb') as f:
        reader = csv.DictReader(f)
        for row in reader:
            user_ids.append(row)

    ease = apperian.Pyapi('user', 'pw', args.env, args.verbose)
    count = 0
    while ease.status != 200 and count < 3:
        count += 1
        user = raw_input('Username > ')
        pw = getpass.getpass('Password > ')
        ease.auth(user, pw)

        if ease.status != 200:
            if count < 3:
                print 'Unable to authenticate, enter credentials again\n'
            else:
                exit('Failed attempts exceeded, check your credentials')

    print 'Building list of user PSKs'
    tmp_user_list = ease.user.list()
    tmp_user_list = [{'psk': x['psk'], 'user_id': x['id']} for x in tmp_user_list['result'] for y in user_ids
                     if x['id'] == y['User ID']]

    print 'Checking for duplicates'
    psk_list = []
    user_list = []
    for i in tmp_user_list:
        if i['psk'] not in psk_list:
            psk_list.append(i['psk'])
            user_list.append(i)

    if len(tmp_user_list) - len(user_list) != 0:
        print 'Removed {} duplicates'.format(len(tmp_user_list))

    total = len(user_list)
    raw_input('About to delete {} users from org {}. Press any key to continue.'.format(total, ease.org_psk))

    count, auth_fail = 0, 0
    progress_bar = progress.Bar(total)
    while user_list and auth_fail < 3:
        target_user = user_list[-1]
        delete_request = ease.user.delete(target_user['psk'])

        if delete_request['status'] == 401:
            auth_fail += 1
            ease.auth()
        else:
            count += 1
            auth_fail = 0
            target_user = user_list.pop()
            if delete_request['status'] == 200:
                success.append([args.org, target_user['user_id'], today])
            else:
                failed.append([target_user['user_id'], delete_request['result']])

            progress_bar.update(count)

    if ease.status != 200:
        print 'Re-authentication failed 3 times, there is an issue with the connection to the server.'
        print delete_request
        print 'Remaining users have been marked failed.'

        failed.extend(user_list)

    if failed:
        print '{} failed. Check {}/failed_{}.csv for details\n'.format(len(failed), base_path, today)
        with open('{}/failed_{}.csv'.format(base_path, today), 'wb') as f:
            writer = csv.writer(f)
            writer.writerows(failed)

    if success:
        with open('{}/deleted_master.csv', 'ab') as f:
            writer = csv.writer(f)
            writer.writerows(success)
        with open('{}/deleted_{}.csv'.format(base_path, today), 'ab') as f:
            writer = csv.writer(f)
            writer.writerows(success)

if __name__ == '__main__':
    main()
