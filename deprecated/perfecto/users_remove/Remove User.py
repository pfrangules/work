__author__ = 'Shawn Roche'
import urllib2


def main():
    admin_u = 'shawnr@perfectomobile.com'  # Username of the person running the script
    admin_pw = '!Perfecto1234$'  # Password of the user running the script
    user_id = raw_input('Enter User ID of the user to be deleted: ')  # Username of user to be deleted. Set at runtime.
    c_file = open('cloud_data.txt', 'r')  #

    for line in c_file:
        cloud = line.split()[0]
        c_list = check_user(cloud, user_id, admin_u, admin_pw, c_list)
    c_file.close()
    remove_user(c_list, user_id, admin_u, admin_pw)


def error_logging(filename, cloud, msg):
    """logs any errors into out.txt, located in the same folder as the script"""
    with open(filename, 'a') as f:
        f.write(cloud + " " + msg + '\n')
        f.write('\n')


def output(http_reply, cloud, user_id, url_condition, url):
    """Provides shell feedback on script progress and logs any error messages in out.txt"""
    for condition in url_condition:
        if condition in http_reply:
            print cloud + ' - Success'
    if '403 Forbidden' in http_reply:
        print 'Deletion failed on ' + cloud + ' with 403 Forbidden, check out.txt for error details'
        error_logging('out.txt', cloud,  user_id + ' - ' + url)
    else:
        print 'Deletion failed on ' + cloud + ' Check out.txt for error details'
        error_logging('out.txt', cloud, user_id + ' - ' + http_reply)


def check_user(cloud, user_id, admin_u, admin_pw, cloud_list):
    """Checks to see if user exists on clouds, and if so adds the cloud to a list to be deleted"""
    cloud_list = []
    url_success = ['Success', 'success']
    url = '%s/services/users/%s?operation=info&user=%s&password=%s' % (cloud, user_id, admin_u, admin_pw)

    try:
        print url
        resp = urllib2.urlopen(url)

        contents = resp.read()
    except urllib2.HTTPError, error:
        contents = error.read()
    except urllib2.URLError:
        contents = 'Failed, check URL' + url

    for condition in url_success:
        if condition in contents:
            cloud_list.append(cloud)
    
    output(contents, cloud, user_id, url_success, url)
    return cloud_list


def remove_user(cloud_list, user_id, adminu, adminpw):
    """Removes the user from the list of clouds generated by the check_user function"""
    url_success = ['Success', 'success']
    for cloud in cloud_list:
        try:
            resp = urllib2.urlopen('%s/services/users/%s?operation=delete&user=%s&password=%s' %
                                   (cloud, user_id, adminu, adminpw))
            contents = resp.read()
        except urllib2.HTTPError, error:
            contents = error.read()
        except urllib2.URLError:
            contents = 'failed'
        output(contents, cloud, user_id, url_success, '')

if __name__ == '__main__':
    main()